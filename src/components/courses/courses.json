[
  {
    "type": "playlist",
    "id": 377056,
    "title": "Upgrade Your Terminal and Make It a Joy to Work with",
    "description": "ðŸš€ In this collection, I will be going over some command line tools I use on a daily basis that make my life a lot easier.\n\n[First up is fzf](https://github.com/junegunn/fzf).\n\n> fzf is a general-purpose command-line fuzzy finder.",
    "slug": "upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1",
    "published": true,
    "updated_at": "2020-07-08T16:59:42.279-05:00",
    "created_at": "2020-06-22T15:11:26.877-05:00",
    "duration": 224,
    "state": "published",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/thumb/bash_shell.png",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244950/blog/terminal_share_f8wl6e.jpg",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_480/bash_shell.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_280/bash_shell.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_256/bash_shell.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_128/bash_shell.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_64/bash_shell.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/square_32/bash_shell.png",
    "primary_tag": {
      "name": "bash",
      "slug": "bash",
      "label": "Bash",
      "context": "languages",
      "description": "Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. Bash is a command processor that typically runs in a text window, where the user types commands that cause actions. Bash can also read and execute commands from a file, called a shell script.",
      "url": "https://egghead.io/api/v1/tags/bash",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/thumb/bash_shell.png",
      "http_url": "https://egghead.io/browse/languages/bash"
    },
    "tags": [
      {
        "name": "bash",
        "slug": "bash",
        "label": "Bash",
        "context": "languages",
        "description": "Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. Bash is a command processor that typically runs in a text window, where the user types commands that cause actions. Bash can also read and execute commands from a file, called a shell script.",
        "url": "https://egghead.io/api/v1/tags/bash",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/thumb/bash_shell.png",
        "http_url": "https://egghead.io/browse/languages/bash"
      }
    ],
    "library_list": [],
    "language_list": ["bash"],
    "framework_list": [],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1",
    "path": "/playlists/upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1",
    "http_url": "https://egghead.io/playlists/upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1",
    "lessons_url": "https://egghead.io/api/v1/playlists/upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/218/thumb/bash_shell.png",
    "first_lesson_path": "/lessons/bash-interactively-find-anything-by-piping-it-to-fzf-in-the-terminal?pl=upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/377056/users/453410/toggle_save",
    "rss_url": "/playlists/upgrade-your-terminal-and-make-it-a-joy-to-work-with-13f1/playlist_feed?user_email=gug007%40i.ua&user_token=7cc73db2-4a35-4bea-9944-5910f911f1b8",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 347616,
    "title": "Intro to Stimulus",
    "description": "Stimulus is a JavaScript framework that is purposed to enhance your HTML. Stimulus will monitor your HTML and wait for its `data-controller` attribute to be declared on an element. Thats when you controller JavaScript is connected and its methods triggered.",
    "slug": "intro-to-stimulus-733b",
    "published": true,
    "updated_at": "2020-01-25T14:39:25.379-06:00",
    "created_at": "2020-01-23T14:17:31.126-06:00",
    "duration": 361,
    "state": "published",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244793/blog/stimulus_share_ac2wur.jpg",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
    "primary_tag": {
      "name": "javascript",
      "slug": "javascript",
      "label": "JavaScript",
      "context": "frameworks",
      "description": "JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
      "url": "https://egghead.io/api/v1/tags/javascript",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
      "http_url": "https://egghead.io/browse/frameworks/javascript"
    },
    "tags": [
      {
        "name": "javascript",
        "slug": "javascript",
        "label": "JavaScript",
        "context": "frameworks",
        "description": "JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
        "url": "https://egghead.io/api/v1/tags/javascript",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "http_url": "https://egghead.io/browse/frameworks/javascript"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": ["javascript"],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/intro-to-stimulus-733b",
    "path": "/playlists/intro-to-stimulus-733b",
    "http_url": "https://egghead.io/playlists/intro-to-stimulus-733b",
    "lessons_url": "https://egghead.io/api/v1/playlists/intro-to-stimulus-733b/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "first_lesson_path": "/lessons/javascript-connect-a-stimulus-controller-to-your-html?pl=intro-to-stimulus-733b",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/347616/users/9671/toggle_save",
    "rss_url": "/playlists/intro-to-stimulus-733b/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/intro-to-stimulus-733b/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/intro-to-stimulus-733b/remove_playlist",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 354190,
    "title": "Introduction to RedwoodJS: full-stack framework for JAMstack",
    "description": "RedwoodJS takes the JAMstack philosophy to the next level. It brings together all the tools modern web development has to offer:\n\n- React\n- GraphQL\n- Prisma\n\nRedwoodJS abstracts database management away from you so that you can just build your schema and it will do all the plumbing. This collection will go over how to create a RedwoodJS project and the scripts that will help make your developer experience a joy.\n",
    "slug": "introduction-to-redwoodjs-full-stack-jamstack-framework-2b10",
    "published": true,
    "updated_at": "2020-03-16T17:16:37.412-05:00",
    "created_at": "2020-03-16T15:23:56.298-05:00",
    "duration": 508,
    "state": "published",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244754/blog/redwood_share_cktjtg.jpg",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/thumb/big-redwood.png",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_480/big-redwood.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_280/big-redwood.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_256/big-redwood.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_128/big-redwood.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_64/big-redwood.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/square_32/big-redwood.png",
    "primary_tag": {
      "name": "redwoodjs",
      "slug": "redwoodjs",
      "label": "RedwoodJS",
      "context": "frameworks",
      "description": "Bringing full-stack to the JAMstack\n\nDo you love the JAMstack philosophy but need a database-backed web app? Want great developer experience and easy scaling? Redwood is here! Built on React, GraphQL, and Prisma, Redwood works with the components and development workflow you love, but with simple conventions and helpers to make your experience even better.",
      "url": "https://egghead.io/api/v1/tags/redwoodjs",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/thumb/big-redwood.png",
      "http_url": "https://egghead.io/browse/frameworks/redwoodjs"
    },
    "tags": [
      {
        "name": "redwoodjs",
        "slug": "redwoodjs",
        "label": "RedwoodJS",
        "context": "frameworks",
        "description": "Bringing full-stack to the JAMstack\n\nDo you love the JAMstack philosophy but need a database-backed web app? Want great developer experience and easy scaling? Redwood is here! Built on React, GraphQL, and Prisma, Redwood works with the components and development workflow you love, but with simple conventions and helpers to make your experience even better.",
        "url": "https://egghead.io/api/v1/tags/redwoodjs",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/thumb/big-redwood.png",
        "http_url": "https://egghead.io/browse/frameworks/redwoodjs"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": ["redwoodjs"],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10",
    "path": "/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10",
    "http_url": "https://egghead.io/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10",
    "lessons_url": "https://egghead.io/api/v1/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/285/thumb/big-redwood.png",
    "first_lesson_path": "/lessons/redwoodjs-generate-a-redwood-project?pl=introduction-to-redwoodjs-full-stack-jamstack-framework-2b10",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/354190/users/9671/toggle_save",
    "rss_url": "/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/introduction-to-redwoodjs-full-stack-jamstack-framework-2b10/remove_playlist",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 350830,
    "title": "Introduction to Client Side Web APIs",
    "description": "This collection will cover the basics of how to interact with an HTML document with JavaScript. We will go over:\n\n- What is the DOM?\n- fetch elements from an HTML document\n- add HTML nodes to a HTML document\n- Respond to click events",
    "slug": "introduction-to-client-side-web-apis-72d0",
    "published": true,
    "updated_at": "2020-02-21T08:29:07.125-06:00",
    "created_at": "2020-02-18T08:28:19.633-06:00",
    "duration": 426,
    "state": "published",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244752/blog/dom_share_ijfhhj.jpg",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_480/javascriptlang.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_280/javascriptlang.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_256/javascriptlang.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_128/javascriptlang.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_64/javascriptlang.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/square_32/javascriptlang.png",
    "primary_tag": {
      "name": "javascript",
      "slug": "javascript",
      "label": "JavaScript",
      "context": "frameworks",
      "description": "JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
      "url": "https://egghead.io/api/v1/tags/javascript",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
      "http_url": "https://egghead.io/browse/frameworks/javascript"
    },
    "tags": [
      {
        "name": "javascript",
        "slug": "javascript",
        "label": "JavaScript",
        "context": "frameworks",
        "description": "JavaScriptÂ® (often shortened to JS) is a lightweight, interpreted, object-oriented language with first-class functions, most known as the scripting language for Web pages, but used in many non-browser environments as well such as node.js or Apache CouchDB. It is a prototype-based, multi-paradigm scripting language that is dynamic, and supports object-oriented, imperative, and functional programming styles.",
        "url": "https://egghead.io/api/v1/tags/javascript",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
        "http_url": "https://egghead.io/browse/frameworks/javascript"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": ["javascript"],
    "tool_list": [],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/introduction-to-client-side-web-apis-72d0",
    "path": "/playlists/introduction-to-client-side-web-apis-72d0",
    "http_url": "https://egghead.io/playlists/introduction-to-client-side-web-apis-72d0",
    "lessons_url": "https://egghead.io/api/v1/playlists/introduction-to-client-side-web-apis-72d0/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/205/thumb/javascriptlang.png",
    "first_lesson_path": "/lessons/javascript-wtf-is-the-dom?pl=introduction-to-client-side-web-apis-72d0",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/350830/users/9671/toggle_save",
    "rss_url": "/playlists/introduction-to-client-side-web-apis-72d0/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/introduction-to-client-side-web-apis-72d0/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/introduction-to-client-side-web-apis-72d0/remove_playlist",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 347756,
    "title": "Yarn 2 AKA Berry",
    "description": "Yarn 2 (Berry) has finally [released a stable version](https://dev.to/arcanis/introducing-yarn-2-4eh1)! \n\nThe yarn team has been working on this release for over 2 years. \n\nThis collection goes over: \n\n- What yarn pnp is and how it tries to solve the `node_modules` problem\n- How to install yarn globally and locally inside of a single project\n- How to use `yarn dlx`\n- How to use `yarn up` to manage yarn workspace dependencies\n\n",
    "slug": "yarn-2-4526",
    "published": true,
    "updated_at": "2020-02-14T09:54:36.279-06:00",
    "created_at": "2020-01-25T14:38:42.770-06:00",
    "duration": 311,
    "state": "published",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244749/blog/yarn_share_vw9p0n.jpg",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/thumb/yarn.png",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_480/yarn.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_280/yarn.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_256/yarn.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_128/yarn.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_64/yarn.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/square_32/yarn.png",
    "primary_tag": {
      "name": "yarn",
      "slug": "yarn",
      "label": "Yarn",
      "context": "tools",
      "description": "Fast, reliable, and secure dependency management.",
      "url": "https://egghead.io/api/v1/tags/yarn",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/thumb/yarn.png",
      "http_url": "https://egghead.io/browse/tools/yarn"
    },
    "tags": [
      {
        "name": "yarn",
        "slug": "yarn",
        "label": "Yarn",
        "context": "tools",
        "description": "Fast, reliable, and secure dependency management.",
        "url": "https://egghead.io/api/v1/tags/yarn",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/thumb/yarn.png",
        "http_url": "https://egghead.io/browse/tools/yarn"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [],
    "tool_list": ["yarn"],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/yarn-2-4526",
    "path": "/playlists/yarn-2-4526",
    "http_url": "https://egghead.io/playlists/yarn-2-4526",
    "lessons_url": "https://egghead.io/api/v1/playlists/yarn-2-4526/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/963/thumb/yarn.png",
    "first_lesson_path": "/lessons/yarn-wtf-is-yarn-plug-n-play-pnp?pl=yarn-2-4526",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/347756/users/9671/toggle_save",
    "rss_url": "/playlists/yarn-2-4526/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/yarn-2-4526/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/yarn-2-4526/remove_playlist",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 309823,
    "title": "Introduction to Urql: A React GraphQL Client",
    "description": "In this playlist, we are going to go over how to set up and use urql as a GraphQL client. \n\nYou will learn how to set up an Urql `Provider` component so that all of your React components have access to urql. Then you will learn how to use 3 of urql's React Hooks:\n\n- useQuery\n- useMutation\n- useSubscription\n\nEach of these lessons covers their corresponding GraphQL topic: Queries, Mutations, and Subscription.",
    "slug": "introduction-to-urql-a-react-graphql-client-faaa2bf5",
    "published": true,
    "updated_at": "2020-01-22T11:09:54.208-06:00",
    "created_at": "2019-05-28T21:39:48.271-05:00",
    "duration": 1579,
    "state": "published",
    "image": "https://res.cloudinary.com/dzsq0psas/image/upload/v1594244751/blog/urql_share_prmmbk.jpg",
    "image_thumb_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
    "square_cover_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_480/graphqllogo.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_280/graphqllogo.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_256/graphqllogo.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_128/graphqllogo.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_64/graphqllogo.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/square_32/graphqllogo.png",
    "primary_tag": {
      "name": "graphql",
      "slug": "graphql",
      "label": "GraphQL",
      "context": "tools",
      "description": "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.",
      "url": "https://egghead.io/api/v1/tags/graphql",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
      "http_url": "https://egghead.io/browse/tools/graphql"
    },
    "tags": [
      {
        "name": "graphql",
        "slug": "graphql",
        "label": "GraphQL",
        "context": "tools",
        "description": "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.",
        "url": "https://egghead.io/api/v1/tags/graphql",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
        "http_url": "https://egghead.io/browse/tools/graphql"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": [],
    "tool_list": ["graphql"],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "url": "https://egghead.io/api/v1/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5",
    "path": "/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5",
    "http_url": "https://egghead.io/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5",
    "lessons_url": "https://egghead.io/api/v1/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5/items?flatten=true",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
    "first_lesson_path": "/lessons/vs-code-install-graphql-tag-to-enable-syntax-highlighting-for-graphql-queries?pl=introduction-to-urql-a-react-graphql-client-faaa2bf5",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/309823/users/9671/toggle_save",
    "rss_url": "/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/introduction-to-urql-a-react-graphql-client-faaa2bf5/remove_playlist",
    "is_watch_later": null,
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    }
  },
  {
    "type": "playlist",
    "id": 409013,
    "title": "React Real-Time Messaging with GraphQL using urql and OneGraph",
    "description": "One of the most well-known GraphQL features is that it lets you do things like replacing multiple REST calls with a single query. You might have done some query experimentation with demo APIs or working on a Gatsby site. \n\nBut there's more to GraphQL than just making queries.\n\nFor example, with mutations and subscriptions, GraphQL can smooth out the process of implementing real-time features in your web applications.\n\nIn this new course, you'll get practice with these features as egghead's own Ian Jones guides you through building a real-time chat app that's backed by GitHub Issues.\n\nThe tools used for the course are OneGraph and Formidable Labs' urql client.\n\nOneGraph is great because it allows you to expose a single GraphQL endpoint that can access data from multiple services including GitHub, Stripe, Airtable, and more. It handles things like authentication for us as well, as you'll see in the course.\n\nAt Formidable Labs, the team released urql as a lighter weight alternative to Apollo or Relay that supports the most common interactions with a GraphQL server through their handy React Hooks. \n\nThe course starts with a fresh Create-React-App and touches upon topics like using GraphQL query variables, working with Hooks, handling authentication with React Context, and setting up & consuming the GraphQL subscription.\n\nAlong the way, Ian also works through debugging some common errors that you may encounter when developing your own GraphQL apps in the future!",
    "slug": "react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "published": true,
    "updated_at": "2020-11-18T19:26:52.269-06:00",
    "created_at": "2020-11-08T12:46:17.475-06:00",
    "duration": 4882,
    "state": "published",
    "visibility_state": "indexed",
    "tagline": null,
    "code_url": null,
    "access_state": "pro",
    "primary_tag": {
      "name": "react",
      "slug": "react",
      "label": "React",
      "context": "frameworks",
      "description": "React is one of the webâ€™s most popular frameworks for building JavaScript applications. \n\nIf you know what youâ€™re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether youâ€™re a React newbie or youâ€™re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
      "url": "https://egghead.io/api/v1/tags/react",
      "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
      "http_url": "https://egghead.io/browse/frameworks/react"
    },
    "tags": [
      {
        "name": "react",
        "slug": "react",
        "label": "React",
        "context": "frameworks",
        "description": "React is one of the webâ€™s most popular frameworks for building JavaScript applications. \n\nIf you know what youâ€™re doing, React can drastically simplify how you build, use, and maintain code.\n\nWhether youâ€™re a React newbie or youâ€™re ready for advanced techniques, you can level-up with egghead. Explore our in-depth courses, lessons, and community resources to build more powerful applications and crack open your career.",
        "url": "https://egghead.io/api/v1/tags/react",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/000/026/thumb/react.png",
        "http_url": "https://egghead.io/browse/frameworks/react"
      },
      {
        "name": "graphql",
        "slug": "graphql",
        "label": "GraphQL",
        "context": "tools",
        "description": "GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.",
        "url": "https://egghead.io/api/v1/tags/graphql",
        "image_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
        "http_url": "https://egghead.io/browse/tools/graphql"
      }
    ],
    "library_list": [],
    "language_list": [],
    "framework_list": ["react"],
    "tool_list": ["graphql"],
    "platform_list": [],
    "skillset_list": [],
    "skill_level_list": [],
    "image": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_480/EGH_RealtimeGraphqL.png",
    "square_cover_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_280/EGH_RealtimeGraphqL.png",
    "square_cover_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_256/EGH_RealtimeGraphqL.png",
    "square_cover_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_128/EGH_RealtimeGraphqL.png",
    "square_cover_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_64/EGH_RealtimeGraphqL.png",
    "square_cover_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/square_32/EGH_RealtimeGraphqL.png",
    "square_cover_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/thumb/EGH_RealtimeGraphqL.png",
    "square_cover_large_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/full/EGH_RealtimeGraphqL.png",
    "square_cover_landscape_url": "https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/409/013/landscape/EGH_RealtimeGraphqL.png",
    "url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "path": "/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "http_url": "https://egghead.io/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "lessons_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/items?flatten=true",
    "items_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/items?flatten=false",
    "icon_url": "https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/034/thumb/graphqllogo.png",
    "tracklist_id": null,
    "is_watch_later": false,
    "first_lesson_path": "/lessons/react-real-time-messaging-with-graphql-using-urql-and-onegraph-with-ian-jones?pl=react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "favorited": false,
    "toggle_favorite_url": "https://egghead.io/api/v1/playlists/409013/users/9671/toggle_save",
    "rss_url": "/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/playlist_feed?user_email=jones58ian%40gmail.com&user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2",
    "bundle_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/bundle",
    "remove_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/remove_playlist",
    "add_to_playlist_url": "https://egghead.io/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/add",
    "edit_url": "https://egghead.io/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/edit",
    "item_add_url": "https://egghead.io/api/v1/users/9671/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/item/add",
    "item_remove_url": "https://egghead.io/api/v1/users/9671/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/item/remove",
    "reorder_items_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/reorder_items",
    "delete_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "can_set_cover": true,
    "update_owner_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "update_price_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "update_access_state_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a",
    "owner": {
      "id": 9671,
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "avatar_url": "//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128&d=mp",
      "is_instructor": true
    },
    "instructor": {
      "instructor_url": "https://egghead.io/api/v1/instructors/ian-jones",
      "id": 40,
      "slug": "ian-jones",
      "full_name": "Ian Jones",
      "first_name": "Ian",
      "last_name": "Jones",
      "twitter": "_jonesian",
      "website": "https://ianjones.us",
      "bio_short": "Ian Jones is works for egghead writing Ruby on Rails and React.",
      "http_url": "https://egghead.io/instructors/ian-jones",
      "avatar_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/ian.jpg",
      "avatar_480_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/ian.jpg",
      "avatar_280_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/ian.jpg",
      "avatar_256_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/ian.jpg",
      "avatar_128_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/ian.jpg",
      "avatar_64_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/ian.jpg",
      "avatar_32_url": "https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/ian.jpg",
      "lessons_url": "https://egghead.io/api/v1/instructors/ian-jones/lessons",
      "published_lessons": 47,
      "published_courses": 0
    },
    "progress_url": "https://egghead.io/api/v1/playlists/react-real-time-messaging-with-graphql-using-urql-and-onegraph-be5a/progress",
    "collection_progress": {
      "is_completed": false,
      "completed_lesson_count": 4,
      "time_left": 4069,
      "lesson_count": 20,
      "time_remaining": 4069,
      "completed_lessons": [
        {
          "slug": "graphql-query-multiple-services-with-onegraph-graphiql-editor",
          "url": "https://egghead.io/api/v1/lessons/graphql-query-multiple-services-with-onegraph-graphiql-editor"
        },
        {
          "slug": "graphql-query-multiple-services-with-urqls-graphql-client-in-react",
          "url": "https://egghead.io/api/v1/lessons/graphql-query-multiple-services-with-urqls-graphql-client-in-react"
        },
        {
          "slug": "graphql-query-github-comments-with-onegraph-through-urql-s-client-in-react",
          "url": "https://egghead.io/api/v1/lessons/graphql-query-github-comments-with-onegraph-through-urql-s-client-in-react"
        },
        {
          "slug": "react-style-a-react-list-component",
          "url": "https://egghead.io/api/v1/lessons/react-style-a-react-list-component"
        }
      ],
      "series_started_on": "2020-11-08",
      "last_lesson_watched_on": "2020-11-13",
      "series_completed_on": null
    },
    "rating_out_of_5": 5.0,
    "rating_count": 1
  },
    {"type":"playlist","id":587311,"title":"Learn Remix by Building a Social Media Platform with TypeScript and Prisma","description":null,"slug":"learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","published":true,"updated_at":"2022-05-24T17:09:15.372-05:00","created_at":"2022-05-19T15:09:48.569-05:00","duration":5411,"state":"published","visibility_state":"indexed","tagline":null,"code_url":null,"access_state":"pro","published_at":"2022-05-24T17:09:15.278-05:00","free_forever":false,"summary":null,"primary_tag":{"name":"remix","slug":"remix","label":"Remix","context":"topics","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","url":"https://egghead.io/api/v1/tags/remix","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","http_url":"https://egghead.io/browse/topics/remix"},"tags":[{"name":"remix","slug":"remix","label":"Remix","context":"topics","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","url":"https://egghead.io/api/v1/tags/remix","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","http_url":"https://egghead.io/browse/topics/remix"}],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"square_cover_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_480/egh_remix-social-media-app_2000.png","square_cover_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_280/egh_remix-social-media-app_2000.png","square_cover_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_256/egh_remix-social-media-app_2000.png","square_cover_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_128/egh_remix-social-media-app_2000.png","square_cover_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_64/egh_remix-social-media-app_2000.png","square_cover_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/square_32/egh_remix-social-media-app_2000.png","square_cover_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/thumb/egh_remix-social-media-app_2000.png","square_cover_large_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/full/egh_remix-social-media-app_2000.png","square_cover_landscape_url":"https://d2eip9sf3oo6c2.cloudfront.net/playlists/square_covers/000/587/311/landscape/egh_remix-social-media-app_2000.png","url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","path":"/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","lessons_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/items?flatten=true","items_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/items?flatten=false","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","tracklist_id":null,"is_watch_later":false,"first_lesson_path":"/lessons/remix-load-and-display-static-data-with-remix-loaders?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","download_url":"https://egghead.io/api/v1/playlist/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/download?key=eyJzdWIiOiI1ODczMTEiLCJ1IjoiOTY3MSIsImV4cCI6IjE2NjQ5ODc3MTAifQ%3D%3D--0d3ae4f6a492a3e22c2d945047bec33ed1c90877","favorited":false,"toggle_favorite_url":"https://egghead.io/api/v1/playlists/587311/users/9671/toggle_save","rss_url":"https://egghead.io/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/playlist_feed?user_email=jones58ian%40gmail.com\u0026user_token=b430cd65-45a4-476c-ad39-0bec4207f3b2","bundle_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/bundle","remove_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/remove_playlist","flag_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/flag","retire_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/retire","add_to_playlist_url":"https://egghead.io/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/add","edit_url":"https://egghead.io/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/edit","item_add_url":"https://egghead.io/api/v1/users/9671/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/item/add","item_remove_url":"https://egghead.io/api/v1/users/9671/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/item/remove","reorder_items_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/reorder_items","can_set_cover":true,"update_owner_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","update_price_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","update_access_state_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","items":[{"id":9391,"creator_id":71775,"slug":"remix-load-and-display-static-data-with-remix-loaders","title":"Load and Display Static Data with Remix loaders","state":"published","summary":"The first thing you do is install Remix! In this course, you start with a barebones Remix set up. In many situations you will start with a [Remix stack](https://remix.run/docs/en/v1/pages/stacks) but this course starts from the beginning.\n\nInstalling Remix is easy though, so you will finish this lesson by being introduced to a core Remix feature: data loaders.\n\nRemix loaders are functions that only run on the server so you are safe to connect to databases, make API calls, and anything else youâ€™d expect to do on a server. The data you return from these functions will be received into your components through `useLoaderData` hooks. \n\nWeâ€™ll see how to return static data from a loader and display it in a component. Along the way, TypeScript will complain about data that is coming into your component so we will fix that as well.\n","duration":250,"plays_count":0,"published_at":"2022-05-23T22:46:51.940-05:00","is_pro_content":false,"difficulty_rating":0,"series_row_order_position":null,"free_forever":true,"transcript":"Instructor: [0:00] The first thing you want to do is initialize your remix project with the npx create-remix command, followed by the name of your project.\n\n[0:10] After you execute the command, you will be asked to enter project information. Information like the template your app is going to use, where to deploy, whether or not to run npm install.\n\n[0:29] Then, choose your preferred language, TypeScript or JavaScript. Now that you have Remix installed, you'll open up your project in VS Code.\n\n[0:45] You can run the Remix development server with the command npm run dev in your console. Now that your server is running, go ahead and open your site in the browser at localhost:3000.\n\n[1:03] Hop back into VS Code and you can get started on creating some of your own content. Open the index.tsx file inside of the app/routes folder. In this file, you should see the code for a default Remix project.\n\n[1:20] In this next step, you're going to get into the meat of writing a Remix application. You'll kick things off by creating a LoaderFunction above the index component. You'll export const loader with the type of LoaderFunction returning an array with an object of title and body.\n\n[1:45] Remix will run the LoaderFunction on the server, and any code executed here will be removed from the client-side bundle. You are returning a static array of post now, but in the future, the LoaderFunction is where you will connect to your database and make any other API calls you may need.\n\n[2:06] Now, down in your component, you can call the useLoaderData hook to retrieve posts from your LoaderFunction that you just created. Inside of the JSX, delete the template code, and create a list item for each post in the post array.\n\n[2:29] You'll type post.map, taking the post. For each post returning an LI where the key is post.title. Then a div with an h2 for the post title and a paragraph tag for the post body. Head over to your browser and you will see the post being rendered from the LoaderFunction.\n\n[2:53] We're not quite done yet. In your code, notice the TypeScript error coming from the map function. TypeScript has no way of knowing what type your useLoaderData hook is returning. Squash that error by creating a post type.\n\n[3:09] Create a type of post with an attribute title, which is a string and body, which is also a string. Now, pass that type to the useLoaderData hook. You just told TypeScript what type of data the useLoaderData hook is returning.\n\n[3:29] When you hover the post, you can see its type is post. To review what you've learned, first, you created your application with npx create-remix. Next, you modified the route route file in your app folder by creating a LoaderFunction that returns static posts.\n\n[3:52] Then, you rendered the posts inside of your index component, and created a post type to pass to your useLoaderData hook to tell TypeScript and VS Code what type of data is being loaded.","casting_words_order":"zFbs","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders","url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders","path":"/lessons/remix-load-and-display-static-data-with-remix-loaders?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-load-and-display-static-data-with-remix-loaders?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/c9r13x5","next_up_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/next_up","tag_list":["free"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-01-load-static-data-fixed-sUMEDEYIM/egghead-01-load-static-data-fixed-sUMEDEYIM.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/related","can_comment":true,"lesson_errata":[],"is_pro":false,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/instructor_playlists","tracklist_id":932200,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-01-load-static-data-fixed-sUMEDEYIM/hls/egghead-01-load-static-data-fixed-sUMEDEYIM.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-01-load-static-data-fixed-sUMEDEYIM/dash/egghead-01-load-static-data-fixed-sUMEDEYIM.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/01-install-remix-and-load-static-data"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-load-and-display-static-data-with-remix-loaders\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-load-and-display-static-data-with-remix-loaders/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-load-and-display-static-data-with-remix-loaders"},{"id":9392,"creator_id":71775,"slug":"remix-install-and-model-data-with-prisma","title":"Install and Model Data with Prisma","state":"published","summary":"Most applications need data persisted to a database. A really great way to manage data is through an (Object-relational mapping) ORM so you arenâ€™t stuck writing SQL queries when you want to be building websites. \n\nPrisma is a modern ORM that lets you get started with a database in just a couple steps. It supports TypeScript to which you will take advantage of.\n\nIn this lesson you will initialize Prisma in your application and model out what a `Post` will look like. Youâ€™ll set a few properties that Prisma will manage (e.g. id, createdAt) and a few that you will manage. Prisma also comes with a studio that you can run to create and manage data super easily when you donâ€™t have other means to CRUD that data (we donâ€™t yet!).","duration":274,"plays_count":0,"published_at":"2022-05-23T22:46:56.833-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] It's time to add a database to your project. Prisma is one of the leading object-relational mapping tools or O/RMs for typescript and node.js.\n\n[0:11] Over in your terminal, install the Prisma CLI tool with the command npm i prisma --save-dev. With the CLI installed, you can initialize Prisma with the command npx prisma init passing the data source provider flag with the value of SQLite.\n\n[0:36] SQLite can speed up your development process by avoiding installation of heavy database software, such as Postgres and MySQL. SQLite uses a single file to store your database information. Later in the course, you will replace SQLite with a MySQL database. By running the init command, you created a Prisma folder in your project.\n\n[1:04] When you run the OS Prisma command in your terminal, you will see a schema.prisma file. This file tells Prisma everything it needs to know about your data model. Go ahead and open that file in your editor.\n\n[1:19] By default, Prisma defines the type of client your app will use and the data source provider information. Here is where things get fun. You should add a Post model to your schema. The first attribute you will add is an ID. It's going to be a string with a default of UUID.\n\n[1:43] UUIDs are nice because they are harder to guess compared to auto incrementing number IDs. The next two fields createdAt and updatedAt, will be managed by Prisma as well. When you create a post, createdAt will be set to the current time.\n\n[2:02] Likewise, Prisma will update the value of updatedAt whenever you modify a post. These fields are standard to almost all of the models you will create. Now it's time to add your custom fields. You'll add an optional title of type string.\n\n[2:24] The question mark at the end of string signifies the fields optionality. Your post will need more than just a title. Add a required body field of type string. While you've defined your schema, you haven't told Prisma about this new model yet. Head back over to your terminal and run the command npx prisma db push.\n\n[2:53] This created a SQLite dev.db file in your Prisma folder. It's finally time to add data to your database. To do this, you will use a tool called Prisma Studio. In your terminal, type npx prisma studio, and open the URL at localhost:5555.\n\n[3:27] Here, you can see the post model you've created. Go ahead and click on Posts, then Add Record. You can type something like, \"Persistence yay\" into the body field. Now, add your first DB post to the title and save again.\n\n[3:48] Time to celebrate because you just added your first post to your Prisma database. In review, you added the Prisma's CLI tool to your devDependencies. You ran the npx prisma init command with SQLite as your data source provider.\n\n[4:04] Next, you opened up the schema.prisma file and added a post model to it. The post type has five fields. These fields being ID, createdAt, updatedAt, title, and body. Three of them managed by Prisma, and two of your own.\n\n[4:22] Finally, you started Prisma Studio with npx prisma studio and opened it up in the browser, where you were able to add your own content to your database.","casting_words_order":"zFbB","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma","url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma","path":"/lessons/remix-install-and-model-data-with-prisma?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-install-and-model-data-with-prisma?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/y755st7","next_up_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-02-initialize-prisma-b5IptNKjc/egghead-02-initialize-prisma-b5IptNKjc.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/instructor_playlists","tracklist_id":932201,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-02-initialize-prisma-b5IptNKjc/hls/egghead-02-initialize-prisma-b5IptNKjc.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-02-initialize-prisma-b5IptNKjc/dash/egghead-02-initialize-prisma-b5IptNKjc.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/02-initialize-prisma"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-install-and-model-data-with-prisma\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-install-and-model-data-with-prisma/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-install-and-model-data-with-prisma"},{"id":9393,"creator_id":71775,"slug":"remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders","title":"Retrieve and Display Data from the Database through Prisma and Remix Loaders","state":"published","summary":"Now that you have a database running, you need a way to connect to it in your application. This is where Prisma client joins the fray and really shines. \n\nWith Remix, there is a little bit of set up that we have to do to ensure that we wonâ€™t be opening extra connections to the database through Prisma. Through this set up youâ€™ll learn about another important pattern in Remix which are services. \nYouâ€™ll create a db.server.ts service that will manage setting up the Prisma client. The folks at Remix have us covered with this code snippet that safely sets the client up for you. \n\nAfter creating the client, we will create another service `post.server.ts` that will expose all of the functions that you can use throughout your application to retrieve data from the db. One great benefit of this pattern is that when consuming these services you donâ€™t need to know about the implementation that is powering them. Just the api that is exposed, in this case a `Post` type and `getPosts` function.\n\nFINALLY youâ€™ll consume that function in the data loader at the root of your application to display posts from the database.\n\nThis sounds like a lot but you get this all done in under 5 minutes.","duration":290,"plays_count":0,"published_at":"2022-05-23T22:46:59.744-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] As always, you will start off by installing some npm packages. In your terminal, type npm i @prisma/client. Head over to your project in VS Code, create a folder called services. This folder will store any code that interacts with your database. Inside of services, you are going to create a file called db.server.ts.\n\n[0:42] If you take a look at the official Remix tutorial, they show you how to manage a database connection with Prisma and Remix. Remix will reload your source files every time you make a change. This causes a potential problem in development, since you don't want to create a new connection to the database every time your source files change.\n\n[1:05] If the environment is not production and the global DB variable hasn't been set, you create a new connection and assign it to the global DB variable. You will then sign the connection to the variable you will reference in the rest of your app.\n\n[1:21] When the source files change, this global DB variable will still be there. Now that you've copy pasted the DB code, go and create a post.server file. First things first, you can import the DB from the path ~/services/db.server.ts.\n\n[1:54] Oops, looks like there's an error because services is in the wrong folder. To correct this, drag services into your app folder. Export the type post from Prisma Client. This way, you can keep the post type in the same place as your post database access functions.\n\n[2:15] Users of this file won't have to know that the post type comes from Prisma. Next, you'll export a function called getPost. You will start super simple and return all the posts in the database. Time to put your getPost function to work. Head on over to your route/index file. There is no need to define your own post type. Prisma creates a type that will keep track of all of the attributes on the model for you.\n\n[3:01] GetPost is a Prisma promise. We're going to need to await it. Along with awaiting it, we'll need to make our LoaderFunction async. Notice the new LoaderData type. This type encapsulates the post.\n\n[3:36] If you need to add more data to the loader, the type signature won't have to change. Instead of returning an array, you're going to return Remix's helper JSON function parsing in the data. The JSON function will set the appropriate headers to indicate a JSON response.\n\n[3:56] Since the type of the LoaderFunction has changed, the useLoaderData hook needs to be updated as well. Now, you have to destructure posts out of the response. That's it. Head over to your browser at localhost:3000, and there's the post from your database.\n\n[4:19] In review, you installed the Prisma Client with npm install @prisma/client. Next, you instantiated the Prisma Client while making sure extra database connections wouldn't be created in development. You used Prisma's findMany function to read all the posts in the database. Lastly, you called the getPost function inside of a loader and returned JSON to your index component.","casting_words_order":"zFbD","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders","url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders","path":"/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/28jpcba","next_up_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-03-connect-prisma-with-remix-ZjKltnku6/egghead-03-connect-prisma-with-remix-ZjKltnku6.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/instructor_playlists","tracklist_id":932202,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-03-connect-prisma-with-remix-ZjKltnku6/hls/egghead-03-connect-prisma-with-remix-ZjKltnku6.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-03-connect-prisma-with-remix-ZjKltnku6/dash/egghead-03-connect-prisma-with-remix-ZjKltnku6.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/03-render-posts-from-prisma"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders"},{"id":9394,"creator_id":71775,"slug":"remix-set-up-tailwind-and-create-a-presentational-component-in-remix","title":"Set up Tailwind and Create a Presentational Component in Remix","state":"published","summary":"There are many ways to style an application. While styling isnâ€™t a focus for this course, we donâ€™t want the application to be unbearable to look at. \n\n\nTailwindCSS is how you will style this application. With itâ€™s utility classes, Tailwind stays out of the way once you get it set up. The [Tailwind docs have a great tutorial](https://tailwindcss.com/docs/guides/remix) which you can follow to get to styling your application. You can also follow along in this tutorial.","duration":480,"plays_count":0,"published_at":"2022-05-23T22:47:03.483-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] To style this project, you will be using Tailwind. Tailwind gives you access to hundreds of utility classes that enable you to write consistent CSS across your app.\n\n[0:11] To install Tailwind in Remix, you will use the guide at tailwindcss.com. To get started, head to your terminal and let's install some dependencies. You will need to npm install tailwindcss, post CSS, Autoprefixer and Concurrently.\n\n[0:39] Tailwind has a command line initialization utility you can use to get started. Type npx tailwindcss css init -p. This command created two files, tailwind.config.js and postcss.config.js.\n\n[1:01] Next, you will need to open tailwind.config.js in your editor. Here, Tailwind needs to know what files to watch in order to generate the correct CSS classes for you.\n\n[1:14] You can add as many paths to this array as you want. The path that is pasted here will match any JS, JSX, TS, or TSX files in the app folder. Now that the configuration is all set, you need to add npm scripts to run Tailwind in Dev and during the build.\n\n[1:38] The first script will watch the file system and output any styles found in app/styles/app.css. The build CSS script is similar. The difference being it needs to only run once and won't watch your file system.\n\n[1:55] Now that you have commands to build your CSS, concurrently can be used to run the dev CSS and Remix Dev commands in parallel. Finally, the build command is modified to run the build CSS command in addition to Remix build.\n\n[2:12] The last addition you need to make is to add the styles/app.css file. Go ahead and create a Styles folder. Inside of that folder, create an app.css file. You can paste in the default Tailwind directives for each of the Tailwind layers.\n\n[2:29] After all that rigmarole, Tailwind is set up. Head over to your routes index file and you can reference the stylesheet Tailwind generates. In Remix, exporting a links function from a route page allows you to control the different links that are referenced in the HTML header attribute on the page.\n\n[2:52] Export a function called links, then return an array with an object where the route is stylesheet and the href is styles. Looks like an old build is running, so I'm going to kill it and restart to get Tailwind running.\n\n[3:16] Look over at the generated app.css file, and you can see the default CSS. By default, Tailwind will create these reset styles. They will make a web app look more consistent across different kinds of browsers.\n\n[3:31] Head over to the browser to remember what the app looked like before you add a Tailwind. To prove Tailwind is working, apply a couple of classes to the H1 on this page. Head over to the browser and you can see styles are working. It's time to create a simple post component. Create a component's directory.\n\n[3:58] This directory is where all your presentational components will live. Create another folder called post, then create a post.tsx file where the component will live. Since it's annoying to import components/post/post, create an index.tsx file, so that you can just import /components/post.\n\n[4:27] Inside of the post file, create a function called Post. It's going to take a title and children. Export the post component from the post/index file. Head back to your routes index file and we're going to import the post component. The post component is conflicting with our post type, so alias the component as post component.\n\n[5:24] Head over to the browser to make sure that the component is rendering correctly. TypeScript is complaining that we haven't declared a type for a component props.\n\n[5:48] Create a types.ts file and you can define a PropsType. Props will take an optional title of type string or null. Component props without ref is a utility type that React provides. This provides types for all of the possible attributes for the HTML element you pass in as a generic.\n\n[6:13] It looks like there's a mistake with the prop names. The prop title is already defined in component props without ref. To avoid the name collision, rename the component prop to header. It's time to add some styles to our component.\n\n[6:44] First, you'll add some styles for the wrapper div to give all of the text inside some room to breathe. Second, you'll add some header styles to make the title stand out. Lastly, add some styles to the body. This lightens the text color, so it doesn't overshadow the header.\n\n[7:18] Now, if you take a look in the browser, you can see our fancy new post component. Let's review what you've learned. You installed Tailwind CSS, PostCSS, Autoprefixer and Concurrently. Next, you use the Tailwind CSS CLI to generate configuration files.\n\n[7:37] You edited the Tailwind config to add the app files to the Tailwind's watch path. Lastly, you created a new post component that takes a header in children.","casting_words_order":"zFDe","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix","url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix","path":"/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/vhp9hdw","next_up_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-04-tailwind-kHdPewKKZ/egghead-04-tailwind-kHdPewKKZ.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/instructor_playlists","tracklist_id":932203,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-04-tailwind-kHdPewKKZ/hls/egghead-04-tailwind-kHdPewKKZ.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-04-tailwind-kHdPewKKZ/dash/egghead-04-tailwind-kHdPewKKZ.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/04-tailwind"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-set-up-tailwind-and-create-a-presentational-component-in-remix\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-set-up-tailwind-and-create-a-presentational-component-in-remix"},{"id":9395,"creator_id":71775,"slug":"remix-add-data-to-your-database-through-remix-actions-and-prisma-create","title":"Add Data to your Database through Remix Actions and Prisma create","state":"published","summary":"This is where things start to get fun, youâ€™re adding data to your database!\n\n To do this, youâ€™ll learn about Remix actions. A Remix action utilizes HTML elements to accept input from the user. When creating data, youâ€™ll set the form to a method of `post`. The form needs a route to post to so you will need to set the `action` to the route that will handle the request. In our case it is the index route the form is in.\n\nThe Remix action itself accepts a request that you can pull the form field data you need off of it. From here you can update your database directly, because youâ€™re on the server! In this case, youâ€™ll create a function createPost that will utilize Prisma to create a record. Once this happens, we will redirect users back to the index page that they were on.","duration":354,"plays_count":0,"published_at":"2022-05-23T22:47:07.068-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] It's time to create a post form. You are going to use this form to fill out post information, and make an HTTP post request to the index route.\n\n[0:11] Remix uses action functions to handle post, put, and delete requests. Inside of the Action function is where you will make a call to your database. The first thing you need to do is head over to the components folder and create a new folder called postForm.\n\n[0:35] Inside of that folder, create a file called postform.tsx. Now, you'll create a function that will return your form JSX. At the bottom of the file, you'll export default postFormComponent. Before we go any further, split the screen so you can see the changes as you make them.\n\n[1:05] Here, I'm going to paste in the styled form component. Next, you can create an index.tsx file and export the postForm from postForm. To get your form rendering, pop over to the routes index file, import the component, and render it just above the posts list.\n\n[1:28] When you save, you can see what the post form looks like. Back in the form component, you can see that the form has a flex and flex column classes. Go ahead and add a gap attribute to let flex manage the space between fields.\n\n[1:50] This lets you remove all the margin bottom classes. Looking at the contents of the form, you have an input field for the title attribute, a text area for the post body, and a submit button at the bottom.\n\n[2:09] For now, this component should take props with the type of component props without ref, passing in a string of form. Instead of passing the method statically, move that attribute up to the component props, and give the prop a default of post.\n\n[2:36] We will pass the method directly and then spread the rest of the props on to the form component. Head back over to the index route. Here, you will add an action prop to the form.\n\n[2:49] You don't want to define this prop inside the component because it is dependent on the page context it is rendered in. Since you are calling the form inside of an index action, Remix uses this to determine that you are posting to an index route and not some parent layout component.\n\n[3:10] Next, head up to the top of the file where you will define an Action function. You can export const action Action function. This function will need to be async. Inside of the params, pluck off the request.\n\n[3:31] When an action is submitted, Remix adds an async FormData function to the request. Const form = await request.FormData. Each field of your postForm component is added to this form. Const raw title = form.get passing in title.\n\n[3:56] Const raw body = form.get passing in body. Now that you have input for a post, it's time to create a call to the database. You'll make a call to an async CreatePost function, passing in the raw title and raw body.\n\n[4:15] This function doesn't exist yet, so you'll go create it in post.server.ts. There is one more thing to do in this Action though. That is to return a redirect back to the index route. To create your DB function, head over to post.server.\n\n[4:34] Here, go export a CreatePost function. The arguments will take an object with a title and body. You can use the pickUtility type to create a type from the object being passed in. This lets you pass in the post type from Prisma and reference the title and body attributes in the type.\n\n[5:00] You can return db.post.create. As you can see from the TypeScript documentation, this function expects an object with an attribute of data, and then the title and body attributes to create the post. Now that this functionality is in place, you can head to the browser and create post with your form.\n\n[5:37] To review, you added a postForm component that takes a method in action prop. Then, you exported an action from the index route. Finally, you received the post input from the formData and created the post with Prisma.","casting_words_order":"zFDc","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create","url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create","path":"/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/1tf918j","next_up_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-05-create-post-A3sTtKvfB/egghead-05-create-post-A3sTtKvfB.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/instructor_playlists","tracklist_id":932204,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-05-create-post-A3sTtKvfB/hls/egghead-05-create-post-A3sTtKvfB.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-05-create-post-A3sTtKvfB/dash/egghead-05-create-post-A3sTtKvfB.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/05-post-form"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-add-data-to-your-database-through-remix-actions-and-prisma-create\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-add-data-to-your-database-through-remix-actions-and-prisma-create"},{"id":9396,"creator_id":71775,"slug":"remix-validate-form-data-through-a-remix-action-using-zod","title":"Validate Form Data Through a Remix Action using Zod","state":"published","summary":"At this point, your form will accept any type of input that users desire. This isn't good, you need to add form validation. \n\nForm validation is another area that there are many ways to accomplish what you need. One great way to get easy form validation is through a library called Zod. Zod allows you to create a schema to parse your form input against. It will return form and field errors when input doesnâ€™t match the rules that you supply.\n\nWith Zod in place, youâ€™ll check form input in the action previously defined. If an error is found, youâ€™ll return an object passing in the errors you find as well as the input that users submitted. This will be used to render error messages in the form and reset form state to what was submitted. This is easy to accomplish with Remix json helper that will also set the error message for you.\n\nAlong the way you will also see how easy it is to type this data.","duration":473,"plays_count":0,"published_at":"2022-05-23T22:47:10.594-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Ian Jones: [0:00] Right now, if you press the submit button without filling out the inputs, an empty post will be created. You want the user to at least fill out the body of a post. To accomplish this, you will need to add data validation in your action.\n\n[0:18] As we all know, when you encounter a problem, the first thing you should do is install an npm package. Head over to the terminal and run npm install zod. Zod is a validation library where you can define a schema for your input and validate that input against the rules you've written. Zod works great with TypeScript, and has many useful helper functions.\n\n[0:48] Head over to your Services folder and create a validations.ts file. In the validations file, import Z from Zod. It's time to create the createPost schema. CreatePost will be an object. This object will have a key of title, and the title will be optional.\n\n[1:22] Next, as you might have guessed, the object will have a body of type string, where the minimum length is greater than or equal to 1.\n\n[1:36] Back in your index route, you can call const result = createPost.safeParse. Now, you can pass in raw title and raw body. If you use the parse function, Zod will throw an error, if the input doesn't match the schema. You want to be able to handle the error yourself.\n\n[2:03] SafeParse will return an object with the attribute success error and data to result that success is false, then there was an error in parsing the data. Here, you can return an object with the key of error, then parse result.error.flattened.\n\n[2:23] You also want to add the form fields to return state of the form to the user. To show you what the Response will look like, head up above the Action function and create an Action data type. The error will have a form error attribute which will be an array of strings.\n\n[3:02] Then there will be a field errors attribute, which is an object with a key of title. Title will be an array of strings and then a key of body. Which will also be an array of strings. Next, we have fields, which are title and body.\n\n[3:22] All of the attributes with the question mark are optional. Instead of using raw title, you can use result.data.title. Likewise with raw body, you're not using the reference to the post, so you can just remove it.\n\n[3:46] One last thing before you move on, wrap this object with a call to the JSON helper function from Remix. In the second param, add a status of 400. Open up your dev console in the browser and you can see this validation code in action.\n\n[4:10] When you click Create Post with an empty body, you can see Remix is returning an error with a status of 400. You are returning JSON back from the Action. To get a reference to the Action Response, call useActionData passing in the action data type.\n\n[4:33] Now, you can pass error and fields down into the post form component. The first thing you should do, is add error and fields to the post form type. At this point, the type can live in its own file. Create a type of props and paste in the action data type.\n\n[5:05] Props will be a union type of the action data type and the component props without ref type. Back in the component file, import type Props from types. There, you can pull off error and fields from the props. Next, if there is a field error, you should display under the input in red.\n\n[5:42] Check if the fielderror.title exists. If it does, render a P tag with red text. Now, you can do the same for the body field error and the top-level form error. Head over to your browser and let's see this working.\n\n[6:10] When you create a post with an empty form, you get the error displayed with \"String must contain at least one character.\" To prove things are still working, add a post without a title. Notice what happens when you type into the title field and hit \"Submit\".\n\n[6:34] The form values disappear. The action is already passing back the form fields it received. All you need to do, is add the form fields to the default value of your input and text area. Let's try it again. When you type into the title field and hit submit, the form keeps its state, but the extra error information is displayed.\n\n[7:02] It looks like TypeScript is upset. You have to make the error and fields coming from Action data undefined because these values aren't set until the user submits the form. Let's review what you've learned. You installed Zod and created a Create Post Schema to parse the data coming into the Action's function.\n\n[7:34] If somebody sends a request that didn't successfully parse, you returned the error in the form fields. Lastly, you added the errors to the post form and passed any values the user typed in back to the form.","casting_words_order":"zFBm","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod","url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod","path":"/lessons/remix-validate-form-data-through-a-remix-action-using-zod?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-validate-form-data-through-a-remix-action-using-zod?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/21j7j3f","next_up_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-06-validate-post-form-PeAO--Q_y/egghead-06-validate-post-form-PeAO--Q_y.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/instructor_playlists","tracklist_id":932205,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-06-validate-post-form-PeAO--Q_y/hls/egghead-06-validate-post-form-PeAO--Q_y.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-06-validate-post-form-PeAO--Q_y/dash/egghead-06-validate-post-form-PeAO--Q_y.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/06-validate-post-data"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-validate-form-data-through-a-remix-action-using-zod\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-validate-form-data-through-a-remix-action-using-zod/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-validate-form-data-through-a-remix-action-using-zod"},{"id":9397,"creator_id":71775,"slug":"remix-connect-a-remix-application-to-planetscale-through-prisma","title":"Connect a Remix Application to PlanetScale Through Prisma","state":"published","summary":"You are at a place where you have an app that will persist data through a sqlite database. Sqlite is great for getting started but as you build out your application, youâ€™ll want a database that can scale with your project. \n\nPlanetScale is the database that you are looking for. PlanetScale is a database as a service that powers a mysql database called Vitess. Vitess is what YouTube is ran on so safe to say it will scale to all your needs. \n\nBecause you used Prisma to set up your database, switching to PlanetScale will be easy. You will create a PlanetScale project, sign in to the CLI, follow the Prisma Quickstart guide and learn about Database workflows with PlanetScale. Who would have thought it would be so easy to migrate your database service.","duration":358,"plays_count":0,"published_at":"2022-05-23T22:47:14.567-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Ian Jones: [0:00] Here's where things get really fun. PlanetScale is a database as a service that wraps a MySQL database called Vitess. Vitess is the database that runs YouTube. When you use PlanetScale, you're giving yourself a lot of room to grow.\n\n[0:14] PlanetScale is focused a lot on their developer experience, which is the reason it's being used for this application. It truly can take you from side project to production. They have a free tier, so it makes it a great choice for a side project.\n\n[0:28] Head on over to their sign-up page to get started. Now that you have an account, create your first PlanetScale database. I'll name it after, Remix Social.\n\n[0:39] The central piece to the PlanetScale workflow is the CLI they have created. You can see the command for creating a database from the CLI here.\n\n[0:49] If you haven't already installed the PlanetScale CLI, check out the instructions on their GitHub page, and pick the instructions that suits your operating system.\n\n[1:00] Head over to the terminal and log in there. You can type the command pscale auth login. It will open a web browser and authenticate with your account.\n\n[1:10] To prove that you are logged in, you can list all the databases with pscale db list. You can look at the Prisma quickstart docs to get a sense for what you need to do to wire up Prisma to PlanetScale.\n\n[1:26] Since Prisma is an ORM, it has abstracted the details of what kind of database you are using. This makes it easy to change your code and start using a different database.\n\n[1:38] Head over to the schema.prisma file, and you'll see just how easy it is to switch to PlanetScale.\n\n[1:45] This project has been using SQLite up until now. It has served its purpose in getting you going. The difference here is that now you're using MySQL as a provider. Notice you have to set the preview flag of referential integrity. This is required to get things going.\n\n[2:04] Now that you have Prisma configured, head over to your .env file and update the database URL. This URL will point Prisma to the correct PlanetScale database and port to connect to. You will use the pscale command to open up port 3309 to talk with the PlanetScale service.\n\n[2:27] Stepping back a little, PlanetScale uses a git-like system to track changes in the database. The main branch is what your live system will use. You can branch off of main and make updates to your branch.\n\n[2:43] When you created deploy request, you can see a diff of changes you are about to make to the main branch.\n\n[2:50] With all that said, create a new branch called initial setup. Now that you have a new branch, use pscale connect to open a new connection to your database. This is the connection to PlanetScale that the Prisma Client will use to access the database.\n\n[3:09] In a new terminal, run the command npx prisma db push. You've used this command before with your SQLite database. Prisma is doing the same thing now, but it is pushing your schema up to a MySQL Database in the cloud.\n\n[3:29] You can open up Prisma Studio and see the database. Prisma Studio is pointed to the PlanetScale connection. Since you haven't created any post yet, it's an empty database. Just like before, you can add data through this UI.\n\n[3:47] Back in your terminal, start up the development server. You can see the post that you created in Prisma Studio. You can also create a post through the application UI. There is your second post.\n\n[4:03] Awesome. The last thing to do, is to merge the initial setup database branch into the main branch. Before you can merge any changes, you have to promote the main branch to production.\n\n[4:22] Then, head over to branches then initial setup. Now, click Create Deploy Request. This is like creating a pull request on GitHub. You can leave comments here and interact with your team around this database change.\n\n[4:46] You can also see the Schema Changes tab. This will show you the diff of what's changed. You've only made editions, so everything is green. Go ahead and click Deploy Changes. Now, you can delete the initial setup branch.\n\n[5:06] Back in your terminal, you can switch to the main branch and restart the server. You will notice that the data didn't carry over between branches. This process is a nice way to test out changes to the database.\n\n[5:27] In review, you created a PlanetScale account. You downloaded the pscale CLI tool, and you created a new PlanetScale database and connected to it.\n\n[5:39] You updated the Prisma schema as well as the database URL. Then you ran the CLI command npx prisma db push, which you've run before. Finally, you created a deploy request and merged it and then reconnected to the main branch.","casting_words_order":"zFBk","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma","url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma","path":"/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/25hqxz0","next_up_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-07-planetscale-YFyq3Jymu/egghead-07-planetscale-YFyq3Jymu.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/instructor_playlists","tracklist_id":932206,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-07-planetscale-YFyq3Jymu/hls/egghead-07-planetscale-YFyq3Jymu.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-07-planetscale-YFyq3Jymu/dash/egghead-07-planetscale-YFyq3Jymu.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/07-planetscale"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-connect-a-remix-application-to-planetscale-through-prisma\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-connect-a-remix-application-to-planetscale-through-prisma"},{"id":9398,"creator_id":71775,"slug":"remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel","title":"Deploy a Remix Application with Production Database to the Internet Through Vercel","state":"published","summary":"Our application has achieved MVP status â€” Minimum Viable Product that is. This means itâ€™s time to deploy.\n\nFor this application, you will use Vercel to deploy to as itâ€™s just a few clicks away. Vercel integrates with GitHub so once you give it access you can connect your GitHub Project. Similarly, Vercel has a PlanetScale integration that will pull in all the necessary environment variables you will need to connect your production database to your deployed application. After setting your env variables youâ€™ll have deployed a full fledged, working application with a production database.\n\nFrom there, we will test out a feature to deployment workflow for you to get a feel for how deployments on Vercel work.","duration":345,"plays_count":0,"published_at":"2022-05-23T22:47:19.130-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] Now you have a minimum set of features on your app. It's time to deploy to production. There are many different platforms you can choose from, but I have used Vercel in the past. It has always fit my needs. All the lessons in this course are in this GitHub repository. You will want to deploy only the Remix Social folder. Head over to Vercel and create an account. Go ahead and create a new project. This is where you will link your Vercel project to a GitHub repository. I have to update my GitHub permissions to allow Vercel to import Remix Social. Here, you can update the project name to Remix Social. Vercel wasn't able to detect that this was a Remix project, so you can select \"Remix\" in the drop-down menu. You need to edit the root path of your project to point to the Remix Social folder. This initial Deploy will break because Prisma requires a database URL to be set. You can fix this by adding the PlanetScale integration to your project. Over in Settings, then Integrations, you can click the Marketplace button. Go ahead and search for PlanetScale and add the integration. This integration will connect Vercel to one of your PlanetScale databases. It will generate all the necessary environment variables to connect to the production PlanetScale database branch. Head back over to your Vercel project settings. You need to add an environment variable called DATABASE_URL. You can remember that this variable is in our local infile while in development. You can use the value in this PlanetScale-Prisma database variable. Head up and create a DATABASE_URL environment variable and set the variable to be available in production and preview environments. When you head back over to your deployed application, you can still see that the application is in a broken state. Even though you updated the environment variables, the application hasn't been redeployed with this new configuration. You can head over to Deployments and redeploy the code with the new .env variables. With the magic of editing, it's deployed. Let's visit and see our application. Now, everything's working. You just deployed a fully functioning application with a production database to the Internet. It has never been easier to build web applications than it is today. Head back to your code, and you can make a small change to get a feel for what the development flow looks like. Add a simple to the index route. Create a branch and push it up to GitHub. It's a good idea to take a screenshot of the UI change you've made so your team can easily see what changed. Next, I like to add a GIF to my pull request to spice it up. You can see that Vercel automatically added a preview deployment to this pull request. This is a nice way for your team to look at the changes you've made without having to pull the code down. Merge the branch and head over to Vercel. You can see that a Deploy to production has automatically been kicked off. Your application has been deployed. You can see that the has been added to the page. To review, you signed up for a Vercel account. Next, you linked your GitHub repository and added an integration for PlanetScale. The PlanetScale integration added a bunch of environment variables, which you used to create your database URL environment variable. Then, you made a simple change and merged it into the main branch on GitHub to get a feel for the development","casting_words_order":"zFHm","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel","url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel","path":"/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/1gz5rh3","next_up_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-08-vercel-YyPS1puiQ/egghead-08-vercel-YyPS1puiQ.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/instructor_playlists","tracklist_id":932207,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-08-vercel-YyPS1puiQ/hls/egghead-08-vercel-YyPS1puiQ.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-08-vercel-YyPS1puiQ/dash/egghead-08-vercel-YyPS1puiQ.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/08-vercel"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel"},{"id":9399,"creator_id":71775,"slug":"remix-create-and-utilize-a-user-model-with-prisma-in-remix","title":"Create and Utilize a User Model with Prisma in Remix","state":"published","summary":"In lesson 08, [Deploy a Remix Application](https://egghead.io/lessons/egghead-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel), we said that the app was MVP status. This isnâ€™t quite true for many applications. You will inevitably need users on your site to make it useful for your customers (or even for yourself).\n\nTo get started adding users, you will update Prisma with a user model and associate it to Posts. From there youâ€™ll update your posts to display user information. Youâ€™ll see how to migrate a Prisma schema in PlanetScale as you deploy these changes.\n\nOne nice tid bit you will pick up along the way is a TypeScript 4.5 feature, Awaited. Awaited will unwrap a promise type for you so that you donâ€™t have to do it yourself which is a big relief.","duration":452,"plays_count":0,"published_at":"2022-05-24T16:22:44.425-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] The next part in your application building journey is to add authentication. Authentication is a big piece of almost every application you see on the web today.\n\n[0:12] I want to take you through form authentication where a user signs up with a username and password. The first step is to add a user model to Prisma into your database. A user row will be created whenever someone signs up for an account.\n\n[0:28] Go ahead and create a new PlanetScale branch called User.\n\n[0:37] In another tab, you can connect the branch you just created. With Pscale connect, remake social, user passing in the port. Now, you can create a Git branch. Make sure to pull master before you create a new branch to get the latest changes.\n\n[0:56] It's a good idea to always branch both your database and your code. This allows you to keep track of changes over time, and document step-by-step how your code changes.\n\n[1:07] It is time to update your Prisma schema. As you can see, you have an ID created at and updated fields, all of which are managed by Prisma. There's a name that's optional and email that's required, and this is unique.\n\n[1:24] This is what a user will use to log in to their account. There's a hashed password and a roll of default of user. Users will have many posts. This connection is important.\n\n[1:38] Eventually, users will be able to follow each other to view one another's posts. You have to be able to associate post with a user. Prisma is telling you that this is an error because it knows that the post doesn't have any reference to the user model yet.\n\n[1:55] Let's add the reference. Now, the post has an author ID that points to a user row. When you reference a post, you will be able to query the author along with the post and access the author via post.author.\n\n[2:11] Let's go push our changes up to PlanetScale. Like always, run npx prisma db push.\n\n[2:22] Now, you can add users to the database, open up Prisma Studio, and you can create a user with a post.\n\n[2:36] There you go. Now, you have a user. Obviously, this password isn't hashed. When you add the signup process, you will hash the password before you create the user. Over in the post table, you can add a post and reference it to the user.\n\n[2:52] All ready. Let's head back to the terminal and restart the development server. You can see here, you have Ian's first post, but none of the user information is being displayed. Let's add the author name to this post. Add the author name to the props and you can display the author named conditionally in a paragraph tag.\n\n[3:29] Next, you can add the author name prop to your types as an optional string. It's time to add the author to our getPost call in post.server. It looks like Create Post is complaining because the author ID is required now.\n\n[3:51] Add an author ID to fix the issue.\n\n[3:59] For the getPost call, you can add include users. You don't want to include the hashed password to the user. You can pass a Select-Object and grab the email and ID.\n\n[4:13] For Prisma, include is additive. It will return all attributes on the post. Then any attributes you selected on the user. Select is the opposite. You have to explicitly select all the attributes you want Prisma to return.\n\n[4:31] Head over to the Index Route. Now you can add post.author.email as the author name prop to the post component. TypeScript will complain about this, but when you head over to the browser, you can see the email field being displayed under the post.\n\n[4:48] It's time to make TypeScript happy. Create Post needs an author ID. You can pass a non-existent ID for now and we'll fix it in the future. To fix the loader data type, you can use the return type from getPost to accomplish this.\n\n[5:08] You will notice that the post type that is returned is wrapped in a Prisma Promise. You can use this awaited TypeScript utility type to access the type that is being wrapped by the Promise. I had to Google around a bit to find the solution.\n\n[5:25] Luckily, Awaited is a new-utility type added in TypeScript 4.5 that solves this exact problem. Previously, you had to add a custom type to your project to unwrap a premise type.\n\n[5:40] The other benefit of this approach is that now you can change the get_post() function without worrying about TypeScript being upset in the future. You are all finished with the code changes.\n\n[5:53] I opened up a deploy request for the user branch on PlanetScale and ran into some errors. There's an error merging the post table. When you add a column to a table, you have to give a row, a default value.\n\n[6:08] To resolve this error, you can merge this deploy request and make the author ID on the Post Table, default to null. Back to the schema file, you can add a question mark to the author and author ID attributes on the post.\n\n[6:24] With these changes in place, push them up to PlanetScale with npx prisma db push. Now on PlanetScale, you can open up another deploy request and make the author ID default to null.\n\n[6:47] To review, you added the user model. This model has basic user information like name and email. A user has many posts on the post model. You make the author optional. Next, you updated the get_post() function.\n\n[7:05] You pass then Includes-block to add the author email address and ID to the post. Then, down in the post component, you pass the author name.\n\n[7:17] Inside of the index route, you pass the author email to the author name prop. Finally, you fixed the TypeScript error by using some of TypeScripts utility types like return type and awaited.","casting_words_order":"zFDB","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix","url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix","path":"/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/2mzvc1j","next_up_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-09-user--e89lJq5i/egghead-09-user--e89lJq5i.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/instructor_playlists","tracklist_id":932208,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-09-user--e89lJq5i/hls/egghead-09-user--e89lJq5i.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-09-user--e89lJq5i/dash/egghead-09-user--e89lJq5i.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/09-user"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-create-and-utilize-a-user-model-with-prisma-in-remix\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-create-and-utilize-a-user-model-with-prisma-in-remix"},{"id":9400,"creator_id":71775,"slug":"remix-create-and-use-a-layout-with-remix-pathless-layout-routes","title":"Create and Use a Layout with Remix Pathless Layout Routes","state":"published","summary":"To further prep for implementing user sign up and log in, you will create a sign up and log in page. To do this, there are a few development workflows that youâ€™ll be introduced to. You will create a reusable button component from the previous button that was created to use inside the Nav header. \n\nTo actually reuse the buttons, youâ€™ll need to create a nav. One thing that you shouldnâ€™t do is apply a nav to every page you create. This is why Remix has layout routes and in this case because itâ€™s an application layout, you will want a pathless â€” pathless meaning it wonâ€™t show up in the url â€” layout route. This is denoted with two underscores in the layout file, for an app that is `__app`.\n\nAlong the way you will be introduced to an awesome component pattern that implements an `as` prop. What this will do is let you define your button AS a link so that you can use actual HTML links instead of buttons for accessibility reasons.","duration":578,"plays_count":0,"published_at":"2022-05-23T22:47:23.042-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] You are going to build UI components that are required for authentication, components like UserForms, a reusable button, and a nav component. You already have a button in the POST form, so you can extract it into its own component to use elsewhere. Copy the JSX and move it over to a button component file. You can remove the submit prop from the button because not all buttons will be in a form. You also don't want to hard-code the text of the button because each button will have its own children. Now, create a types file and export the type called props. Props will be a component without ref passing in any. Just like all the other components, you can add an index.tsx file and export the button from there. Now, you can go back to the POST form and use the button that you just created. You will notice that the type prop is on the button. The button isn't passing along any other props explicitly. Let's fix that. Here, you want to make sure that you pass the rest of the props to the button. This will allow the user of your button component to pass any props to the button. When you inspect the button, you can see its type is submit. Another case you need to solve for, what if someone wants to add a className? Currently, they will override all of the default classes. You can use a package called classnames to resolve this issue. I have enjoyed the utilities that classnames provides in the past. It will help you avoid applying undefined as a class and has some other helpful utilities we won't be going over. Back in your code, you can import cx from classnames. Go ahead and pass the Tailwind classes as the first argument and classname as the second. If the user defines a className prop, classnames will add that to the class string, but if the user doesn't, you won't have to worry about an undefined class being added to your button. Back in your POST form, you can add something like a border to the button, and a class will be applied. Now that you've extracted a button to use in the application, it's time to create the signup page. Remix uses file system routing, so any file created in the Routes folder will be added to a path in your application. I'll paste in the signup page code, and you can see it's a simple page with an h1 and a UserForm component. Head on over to the Components folder, and you can create the UserForm. The UserForm has a lot in common with the POST form. You can see that it takes an error and field prop. These will be exactly the same as you saw in POST form except the fields and field errors will be an email and a password. The first difference you'll notice is the useTransition() hook. useTransition() is a hook from Remix that provides the state of the form. The state can be one of three things, idle, submitting, or loading. The form starts in the idle state. When you click Submit, it transitions to submitting. Finally, if you are transitioning to another page that loads data, the form will be in the loading state while this is happening. You will also notice that there is a capital-F form on the page. This is required to get useTransition() to work. You will see that the button text changes based on the transition state. The button will also be disabled if the state is not idle. Everything else in this form is something you've seen before. There's an email and password field. They both conditionally render an error if it is passed through props. You can add the types. These will look very familiar. You have error and fields, which are both similar to the POST form, but now, you also have form props, which are just generic form element props. Next, export the component from the components index file, and when you save, you'll see the form render on the signup page. It looks like there was an error importing the UserForm component. When you fix that, the UserForm will show up. Now, you can use the same component for the login page. When you navigate to login, you can see the same form but with a different h1. Now that the authentication pages are set up, it's time to add a header to the application. You don't want to have to add a nav header to every page in your application. This would get tedious and time consuming. Remix has a feature called Layout Routes that lets you nest routes inside of one another. You don't want to add any path segments to your route, though. You can use a feature called Pathless Layout Routes. These routes are denoted with two underscores. You can create an __app file. With this pasted-in code, you can see the outlet component. Whether you know it or not, you've already been using an outlet component in your root.tsx file. Your whole application renders inside of this outlet component. The outlet will render any matching sub-route. Because this is an application layout, it will be rendered on every page. Then this specific page will render inside of the outlet component. To get this working, you have to add a folder with the same name as __app. Next, move all of your routes into __app. Reload the browser. You'll see a header and a little spacing because of the CSS in the app layout. Now, it's time to create a nav component. Here, I pasted in the nav code. You'll notice that there is a Remix link tag being used. Links have some nice features you can use, such as the ability to prefetch the page that it links to. By default, a link will not prefetch a page. Inside of the nav component, there's the name of the application and buttons to either log in or create an account. Notice that the button is taking in as prop. The as prop lets the user of the component designate what HTML tag the component renders as. This is nice for something like a button because you may want button styles for a link, but you don't want to use a button HTML element for accessibility reasons. Before you go implement the as prop on the button, export the file from the index component file. This hasn't been implemented yet, so when you click the nav buttons, nothing happens. Over in the button component, you can add an as prop. This will default to a button element. You can assign the as prop to a component variable. The capital letter signals the user and to JSX that this is a React component that needs to be rendered. Now, when the nav passes the button component and as equals link, the link component will be rendered, and you can pass whatever props that a link component takes. Go ahead and update the types to accept an as prop. Now, when clicking the nav buttons, they act like an anchor tag. To review, you extracted a button component from the POST form. You then used the button in the UserForm much like the POST form. You created a UserForm with an input of email and password, displaying any errors that may show up. You added the new useTransition() hook from Remix, which gives you the state of the form and allows you to render content based on the state of the form. Next, you created a signup and login page. Both render the UserForm. Then you created a routeless layout component. The layout component wraps your app in a div and gives some padding, renders a nav, and then an outlet renders the content of the","casting_words_order":"zFHk","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes","url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes","path":"/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/14zmd2x","next_up_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-10-user-components-FfXskiyTd/egghead-10-user-components-FfXskiyTd.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/instructor_playlists","tracklist_id":932209,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-10-user-components-FfXskiyTd/hls/egghead-10-user-components-FfXskiyTd.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-10-user-components-FfXskiyTd/dash/egghead-10-user-components-FfXskiyTd.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/10-user-components"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-create-and-use-a-layout-with-remix-pathless-layout-routes\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-create-and-use-a-layout-with-remix-pathless-layout-routes"},{"id":9401,"creator_id":9671,"slug":"remix-validate-user-sign-up-data-in-remix-and-hash-a-password","title":"Validate User Sign Up Data in Remix and Hash a Password","state":"published","summary":"You need to accept input from a user to sign them up to your application. Creating a user in the database is a straightforward Prisma.create function call. \n\nThe tricky part here is that we want to ensure bad data is not inputed into the form. Weâ€™ve done form validation before but this lesson will show you a more complex version of it. \u2028\u2028Among the validation that is applied, you will hash the password thatâ€™s given to us before saving it to the database as well as check the database for existing users when a sign up is attempted.","duration":567,"plays_count":0,"published_at":"2022-05-23T22:47:26.510-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Ian Jones: [0:01] You're going to wire up the signup page.\n\n[0:04] At the end of the lesson, when someone fills out the email and password form, they will create a user in the database and be redirected to the login page.\n\n[0:15] You might remember that you post to a Remix ActionFunction to create entries in the database.\n\n[0:23] Here is the basic structure of the signup action. It grabs the email and password off of the formData from the request. It then calls the signup user function with that data.\n\n[0:36] After that, you redirect to the login page and have the user log in to the application.\n\n[0:43] The user signup function hasn't been created yet, so let's create it. You can add a new file called users.server.ts. Signup user will take an email and a password, both of which are strings.\n\n[1:01] Next, you can pass those fields to db.user.create. You don't ever want to return the hashed password field, so you can pass a select object selecting every field, except the password.\n\n[1:16] Back in the signup page, you can import the function. Ignore the TypeScript errors for now, you can come back and fix them later.\n\n[1:24] Now, you can head over to the browser and create a user. I will type ian@email.com and a password. You will notice that by submitting the form, you are redirected to the login page.\n\n[1:37] To double-check that the user is really created, open up Prisma Studio, and let's inspect the database. Here in the users table, you'll see that you have an email and a password.\n\n[1:49] Obviously, you didn't hash this password. It's important to note that you don't want to store plain text passwords in your database. Because you are iteratively building a system, it's OK to test things out without doing them 100 percent correctly the first time. You just don't want to deploy this to production.\n\n[2:10] Let's go solve this issue. First thing you'll do is run npm install secure-password in your terminal. This package doesn't come with TypeScript types out of the box, so you can run npm install savedev@types/secure-password.\n\n[2:29] Now, back in your code, you will create an AuthUtil server.ts file. The hash password function is relatively simple. It converts a string to a buffer and parses that buffer to the secure_password hash function.\n\n[2:47] Next, you take the hashed buffer and re-encode it into a string, so that you can store it in the database. Now that you're hashing a password, you can update the call to signup users to hash the password that comes in.\n\n[3:02] Now, when you create a user from the signup page and then head over to Prisma Studio, you will see that the password is indeed, hashed.\n\n[3:17] Now, it's time to validate the data that is coming in to the signup action. You want to prevent people from submitting bad emails and passwords. You have already seen how to validate form input before.\n\n[3:31] The first thing you can do is head over to the validations file and create a signup schema. The schema will take an email that's a string and a password that is a minimum of five characters long.\n\n[3:45] Back in the action, here you can see the validation code. You can see you're using this BadRequest helper function.\n\n[3:53] The BadRequest function takes a type of action data. The data is of type action data, which in turn is parsed to the Remix JSON function with the status that defaults to 400, because we're returning a bad request.\n\n[4:09] This action data type will look very familiar to your Post form action data. There's an error key with the form error and field errors for email and password. Action data also returns fields of email and password to keep the state of the signup form, if there's any error.\n\n[4:32] Back in the action. For TypeScript sake, you want to inspect raw email and raw passwords type, so that we know the values are strings. Form data can be anything from a file to a number to a string, so you want to narrow down the possibility to a string.\n\n[4:50] Next, you can create a fields object to parse back to your form, if there is an error.\n\n[4:56] Now you can call signup.safeParse to validate the incoming data, passing in raw email and raw password. If success is false, you know you got an error, so you can flatten the error and return a BadRequest.\n\n[5:13] The ActionFunction is returning JSON, but our page component isn't. You can call useActionData and pull off the error in field, parse those into the userForm.\n\n[5:26] When you head on over to the browser to test your validation, you can see that errors are being parsed back when the input doesn't match what the signup schema requires.\n\n[5:37] When you try to create a user that is already in the database, you will get a Prisma error. You can see that the error says, there's a unique constraint on the user's table. To avoid this error in production, you can check the database before attempting to create the user.\n\n[6:04] Head over to the user.server file. Here's a function that queries the count of users that have a particular email address that's passed in. If the number is greater than zero, you know the user already exists in the database.\n\n[6:20] Back to your ActionFunction, you can call the checkUserExists function and if it's true, you can return a BadRequest with a form error explaining that the user already exists. Notice that the button is hard-coded to say login.\n\n[6:46] You can solve this by replacing the button with children and have the page component parse the submit button. You will also need to move the useTransition hook up to the signup page.\n\n[7:11] Here, you can parse the button as children of the userForm. Add the useTransition hook to the signup page. One last thing, user signup may fail because of some random issue. You want to check if user signup returns a user.\n\n[7:59] If user exists return a redirect, else return a BadRequest saying something bad happened. To review, you created an ActionFunction. You got the values for the user from the userForm. If those values aren't strings, you return a BadRequest.\n\n[8:23] You validated that the input matches your schema. If it doesn't, you pass the field errors back to the user. If it does pass your schema, then you check if the user exists. If they do, you return a BadRequest.\n\n[8:38] If they don't exist, you can call user signup passing email and password. If you successfully created a user, you redirect the login page. If you don't, you sadly say something went wrong.\n\n[8:53] Meanwhile, inside of your user service, you made sure to hash the user password, because you never want to store plain text passwords in the database. Here's what it looks like one last time.","casting_words_order":"zFBg","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password","url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password","path":"/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/2h8g69v","next_up_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-11-sign-up-user-Dykf1Qlb2/egghead-11-sign-up-user-Dykf1Qlb2.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/instructor_playlists","tracklist_id":932619,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-11-sign-up-user-Dykf1Qlb2/hls/egghead-11-sign-up-user-Dykf1Qlb2.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-11-sign-up-user-Dykf1Qlb2/dash/egghead-11-sign-up-user-Dykf1Qlb2.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/11-sign-up"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-validate-user-sign-up-data-in-remix-and-hash-a-password\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-validate-user-sign-up-data-in-remix-and-hash-a-password"},{"id":9402,"creator_id":9671,"slug":"remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage","title":"Implement User Login in Remix with a Form Strategy and Session Storage","state":"published","summary":"Here comes the bulk of complexity when dealing with authentication. You need to handle verifying that a user account exists in the database and when it passes somehow referencing it throughout your application.\n\nA great way to do this is through Session Storage. You can implement session storage with HTTP cookies (which is what you will do here) or with a database. Youâ€™ll implement functions `commitSession`, `destroySession`, and `getSession` but luckily the Remix docs will give you a head start here.\n\nAlong with session storage, you will need to implement an authentication strategy. Again there are a few ways you can do this whether thatâ€™s magic email, 3rd party auth like GitHub or Twitter, or email / password. Because you are already accepting email / password, that is what you will do!","duration":639,"plays_count":0,"published_at":"2022-05-23T22:47:29.914-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Ian Jones: [0:00] To start off, you can fix the signup form by adding a submit button back. The user form now takes children. You can pass the button in this way.\n\n[0:16] You can use the useTransition hook to adjust the text of the button, based on the state of the form.\n\n[0:27] There are many ways to approach implementing authentication. For this project, you are going to use remix-auth and remix-auth-form. This is a simple way to add authentication without too much headache or signing up for another service.\n\n[0:43] In your terminal, you can run npm install remix-auth and remix-auth-form.\n\n[0:50] Back in your project code, you can add an auth.server.ts file. This file is where all your authentication code will live. This authenticator class comes from Remix Auth.\n\n[1:03] It expects a parameter of session storage. This object will need to implement getSession, commitSession, and destroySession functions. You can implement sessions in a couple of different ways.\n\n[1:18] This project will use HTTP cookies, but you can also create sessions with a database. To implement cookies session storage, head over to the Remix docs. You can see the basic example of how to create a cookie store. Too bad, these cookies aren't quite as tasty.\n\n[1:37] Go ahead and add this code to a file called session.server.ts in your project code. There's a couple things that need to be modified for the cookie session store to work.\n\n[1:54] First, you can update the name to remix social session. You won't be deploying to remix.run, so you need to change the domain the cookies live under.\n\n[2:06] You can check the node mf, and if it's production, use the Vercel URL. If not, don't set a domain. This is important, because the browser won't recognize cookies from other domains.\n\n[2:20] Just for this project, you can bump up expires and max age. For security reasons, you don't always want your cookies to be super long-lived. For this project, it's fine.\n\n[2:33] This HttpOnly flag is important. It tells the browser that JavaScript should have access to this cookie. It's really the only way to keep cookies safe from someone else's JavaScript code.\n\n[2:46] The last update is to make secure true, when you are in production. Secure makes the cookie only work on an HTTPS connection.\n\n[2:56] Back in the auth file, you can import getSession, commitSession, and destroySession. These are the functions your authenticator needs to manage a session. You could implement these functions with the database instead, if you didn't want to use cookies.\n\n[3:11] Now, it's time to dive into the meat of the login process. You will implement a form authentication strategy. There are many different authentication strategies to choose from, for example, an OAuth2 strategy, a magic sign-in link strategy, or even a GitHub login strategy.\n\n[3:35] The form strategy is pretty straightforward. You have seen how to take an email and password to sign up for an account. Now, you're going to take those fields and log the user in. Just like any other form, you can pull the raw fields with form.get.\n\n[3:54] Next, you pass those fields to the login schema. Notice that the parse function is being called. You want Zod to throw an error if the input is invalid, because you are handling the error in the loader function on your page.\n\n[4:10] Finally, if the input is good, you can call the user_login() function.\n\n[4:17] You will notice that the second argument you are parsing to the form strategy is user login. This is naming the form strategy, so that you can look it up later in a Remix action and pass the request to the strategy.\n\n[4:33] Go ahead and create the login schema. The login schema will be exactly the same as the signup one.\n\n[4:51] Now, it's time to create the user_login() function. Everything related to users is in user.server.ts, so you can add the function there. This function is long but don't be intimidated. User_login() takes an email and password.\n\n[5:09] The first thing to do is to check if the email exist in the users table. If the user doesn't exist, you throw an error. If the user does exist, you can call verify_password() parsing in the hashed password from the user, and the plain text password from the form input you just got.\n\n[5:29] The result of verify_password() will either be valid or invalid.\n\n[5:33] If it's invalid, the passwords didn't match or something went wrong, so you throw an error. If it is valid, there's a possibility that the hash should be improved. You can update the hashed password in the database.\n\n[5:49] After all that, you can return the user without a hashed password. Let's take a look at what verify_password() looks like. Again, you have quite a long function. Verify_password() takes a password and a hashed password.\n\n[6:06] The return value of this function is a promise with an object of result that can be invalid or valid. There is optionally an error and optionally an improved hash. You have to convert these strings to a buffer. Remember that the hashed password was Base64 encoded.\n\n[6:27] You have to pass that along to the buffer. Now, you have to handle the result from calling secure_password.verify(). If the result is valid, you return an object with the result being valid. Next, if the result is valid but needs rehashing, you can rehash the password with sp.hash.\n\n[6:50] Finally, if the result is not valid, you can return invalid with an error. If any error was thrown in this process, you want to return invalid with the error to make sure you don't get a bad session. With user_login() and verify_password() implemented, you can wire up the login page.\n\n[7:15] There are two major things you need to add to the login page, the Action for taking user input and calling the form strategy, and the loader for checking if the user is authenticated and grabbing any errors from the session.\n\n[7:31] Inside of the Action, you can call authenticator.authenticate. You can pass the user login name as the first param. Next, the request. Finally, the config object for what you want the authenticator to do on success or failure.\n\n[7:51] Optionally, you can pass throw on error to handle the error in the Action if you want. However, since failureRedirect is present, that will take precedence. The loader will check if the user is already authenticated. You don't want a user signing in again if they are.\n\n[8:12] Next, you can get a reference to the session with getSession passing in the request cookies. Finally, you can see if the Action through an error by checking if the session has the session error key on it, returning a form error if there is.\n\n[8:29] Down in the component, you can get the error with use loader data, and pass the error to the UserForm, and that's it. Now, you can create a user and login. I'll create a user with the email of ian@egghead.io and a password.\n\n[8:48] When you sign in to the newly created user, and open up the developer tools on the application page, you can see that there's a cookie with the name of Remix social session. You just implemented user login with a form strategy. It's time to review.\n\n[9:09] On the sign up page, you added an Action function that uses an authenticator object to login a user with the form strategy. If the user successfully signs in, they're redirected to the index route. If they don't, they're redirected back to the login page.\n\n[9:28] The loader checks if the user is already logged in and directs them to the index page if they are. Next, you look up if there's an error on the session and pass it down to the UserForm if there is. For the authenticator, you're using cookie session storage, which you grab from the Remix Docs.\n\n[9:49] You implemented a form strategy, parsing the raw input to make sure that you're getting good values. Then calling user_login(). Passing in email and password. Inside of user_login(), you check if the user with the email exists in the database. Next, you call verify_password(), passing in the password form value and the user's hashed password. If the result is invalid, you throw an error. If not, you can return the user.\n\n[10:24] Inside of verify_password(), you call secure_password.verify(), converting the strings to a buffer. If the password is valid, you return valid. If it's not, you return invalid with an error.","casting_words_order":"zFBe","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage","url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage","path":"/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/1wsqnms","next_up_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-12-sign-in-user-eibdImiF8/egghead-12-sign-in-user-eibdImiF8.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/instructor_playlists","tracklist_id":932620,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-12-sign-in-user-eibdImiF8/hls/egghead-12-sign-in-user-eibdImiF8.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-12-sign-in-user-eibdImiF8/dash/egghead-12-sign-in-user-eibdImiF8.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/12-user-login"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage"},{"id":9403,"creator_id":9671,"slug":"remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts","title":"Implement Log out Functionality and Only Allow Logged in Users to See Posts","state":"published","summary":"Currently the only way to know if you are logged in is if you check the cookie that is set in the browser. This isnâ€™t super user friendly. You want to add a visual cue as well as a log out button to the nav. \u2028\u2028To accomplish this, you can check if a user exists with the isAuthenticated function that was created in the auth service. If there is a user you will display their email, loaded up from the isAuthenticated check, as well as a log out button.\n\nThe log out button will post to a resource route. This route will log out the user and redirect them to the log in page. \n\nFinally, you will lock up the index page so only logged in users can see and add posts.","duration":268,"plays_count":0,"published_at":"2022-05-23T22:47:33.652-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] The only indication that a user is logged in, is that there is a cookie here in the application panel of the DevTools. The user has no indication that they are logged in. When the user is logged in, they should see their email and a logout button in the nav.\n\n[0:17] Head on over to the app layout component. Here, you can add a LoaderFunction with a call to authenticator.isAuthenticated. This function will return a user, if it's available. You can pass that user back as JSON.\n\n[0:34] Up above the loader, you can add a loader data type with a key of user and a value of session user. Remember that session user has all the fields of a user since the hashed password.\n\n[0:48] Like usual, you can get the user data with the useLoader data hook, and pass the user into the nav component.\n\n[1:02] Inside of the nav, if the user is not present, you can show the Login and Create Account buttons. Now, when you check the app, because there is a user session, you can see the buttons for Login and Create Account have disappeared.\n\n[1:30] If a user is present, you want to display their email. There, now the user will know that they are logged in. Let's split the view, so you can see the UI changes as you make them.\n\n[1:48] Right now, when the user is signed in, they have no way of logging out. Add a logout button to the nav. You will have to add items centered to the unordered list tag to make sure the items lineup.\n\n[2:07] Add a little margin in between the Logout button and the email. Now, you have a logout button, but it doesn't do anything. How do you think you can add functionality to this button to log the user out?\n\n[2:27] You can wrap it in a form. The form will take a post method in an action of log out. The action tells the form where to submit the post. You haven't created a logout route yet. You can add a logout file to your Routes folder.\n\n[2:48] This route won't have any UI, because all it needs to do is sign the user out and redirect them to the login page. Here, you can call authenticator.logout passing a redirect path as an argument.\n\n[3:06] In your browser, when you click Logout, you can see the user is logged out and redirected to the login page again. The user is still able to access the index page and view posts, but they should have to login to view any posts.\n\n[3:24] Hop over to your index page. To protect this page from unauthenticated users, add a call to authenticator.isAuthenticated.\n\n[3:37] You can pass in a failure redirect with the value of login. Now in the browser, you can't access the index page while you're logged out. To prove that logged in users can still access the index page, I'll log in with my account.\n\n[4:02] Now, it's time to review what you've learned. You wanted to give the user a visual cue that they were logged in, so you added their email to the nav and a logout button.\n\n[4:13] You wrapped the logout button with a form that posts to the logout action. The logout route is just an action that calls authenticator.logout, redirecting the user to the login page.","casting_words_order":"zFBc","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts","url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts","path":"/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/23vqbgq","next_up_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-13-update-login-state-for-session-8oCujp2b4/egghead-13-update-login-state-for-session-8oCujp2b4.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/instructor_playlists","tracklist_id":932621,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-13-update-login-state-for-session-8oCujp2b4/hls/egghead-13-update-login-state-for-session-8oCujp2b4.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-13-update-login-state-for-session-8oCujp2b4/dash/egghead-13-update-login-state-for-session-8oCujp2b4.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/13-user-session-ui"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts"},{"id":9404,"creator_id":9671,"slug":"remix-add-user-data-to-a-post-creation-in-remix","title":"Add User Data to a Post Creation in Remix","state":"published","summary":"Finally, you want to associate users to the posts that they make. To do this you will grab the user data from authenticator.isAuthenticated API to pass to the post creation. This data does not need to be validated because itâ€™s coming from the session storage which has already been validated.","duration":83,"plays_count":0,"published_at":"2022-05-23T22:47:38.372-05:00","is_pro_content":true,"difficulty_rating":0,"series_row_order_position":null,"free_forever":false,"transcript":"Instructor: [0:00] Here in the Prisma schema, you can see that a post has an authorId. When you created the model, you added this feature, but you haven't been able to add users to the posts until authentication was completed.\n\n[0:14] In the index action, you can see that a bad user ID is being passed. You only want authenticated users to be able to create posts. You can call authenticator.isAuthenticated inside of the action to accomplish this.\n\n[0:31] This will protect the index route, as well as provide the authorId you need for the post. You don't need to validate this piece of data because it is provided by the session and not the user input.\n\n[0:45] Next, you can pass user.id as the authorId when creating a post. Head on over to the browser and you can see, when you create a post, the user information is on it.\n\n[1:05] To review, you pulled the user ID off of the call to authenticator.isAuthenticated. Then, you pass the user ID to the createPost function. You didn't have to validate this data because it is being provided by the session and not the user input.","casting_words_order":"zFDD","visibility_state":"indexed","site":"egghead.io","staff_notes_url":null,"type":"lesson","lesson_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix","url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix","path":"/lessons/remix-add-user-data-to-a-post-creation-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_url":"https://egghead.io/lessons/remix-add-user-data-to-a-post-creation-in-remix?pl=learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550","http_short_url":"https://egghead.io/s/261ypfh","next_up_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/next_up","tag_list":["pro"],"framework_list":[],"library_list":[],"tool_list":[],"language_list":[],"platform_list":[],"topic_list":["remix"],"skillset_list":[],"skill_level_list":[],"image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","thumb_nail":"https://dcv19h61vib2d.cloudfront.net/thumbs/egghead-14-add-user-to-post-XggDi5sm-/egghead-14-add-user-to-post-XggDi5sm-.jpg","landscape_icon_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/landscape/logo-remix.png","transcript_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/transcript","subtitles_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/subtitles","related_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/related","can_comment":true,"lesson_errata":[],"is_pro":true,"technology":{"name":"remix","label":"Remix","http_url":"https://egghead.io/browse/topics/remix","logo_http_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png"},"primary_tag":{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"},"tags":[{"id":1356,"label":"Remix","name":"remix","description":"Remix is a full stack web framework that focuses on web standards and the server/client model so that you can develop the features your users want and need without being bogged down in over-abstractions. When you get good with Remix, you actually get good at the foundations of web development.","slug":"remix","image":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/thumb/logo-remix.png","image_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_480/logo-remix.png","image_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_280/logo-remix.png","image_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_256/logo-remix.png","image_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_128/logo-remix.png","image_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_64/logo-remix.png","image_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/tags/images/000/001/356/square_32/logo-remix.png","contexts":["topics"],"search_url":"https://egghead.io/search?topic=remix","update_url":"https://egghead.io/api/v1/tags/remix","context":"topics"}],"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","instructor":{"id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":71,"published_courses":0},"instructor_playlists_url=":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/instructor_playlists","tracklist_id":932622,"completed":true,"toggle_favorite_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/favorites/toggle","lesson_view_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/views","favorited":false,"download_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/signed_download","media_urls":{"hls_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-14-add-user-to-post-XggDi5sm-/hls/egghead-14-add-user-to-post-XggDi5sm-.m3u8","dash_url":"https://d2c5owlt6rorc3.cloudfront.net/egghead-14-add-user-to-post-XggDi5sm-/dash/egghead-14-add-user-to-post-XggDi5sm-.mpd"},"notes":null,"code":{"github":{"repo":"remix-course","user":"theianjones","branch":"master/14-user-posts"}},"flag_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/flag","retire_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/retire","remove_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/remove","hide_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/hide","upload_lesson_http_url":"https://egghead.io/lesson_uploads/new?lesson=remix-add-user-data-to-a-post-creation-in-remix\u0026upload=true","edit_lesson_http_url":"https://egghead.io/lessons/remix-add-user-data-to-a-post-creation-in-remix/edit","update_lesson_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix","process_lesson_video_url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix/upload","signed_s3_upload_url":"https://egghead.io/api/v1/s3/sign","notifications":[],"create_lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags","lesson_version_flag_url":"https://egghead.io/api/v1/lesson_version_flags/remix-add-user-data-to-a-post-creation-in-remix"}],"owner":{"id":9671,"full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","avatar_url":"//gravatar.com/avatar/b5d9cbedd8135ea534901339530e6404.png?s=128\u0026d=mp","is_instructor":true},"instructor":{"instructor_url":"https://egghead.io/api/v1/instructors/ian-jones","id":40,"slug":"ian-jones","full_name":"Ian Jones","first_name":"Ian","last_name":"Jones","twitter":"_jonesian","website":"https://ianjones.us","bio_short":"Ian Jones works with React, Ruby on Rails, GraphQL, and a concoction of other JavaScript technologies. \r\n\r\nHe's excited about web development and functional programming.","http_url":"https://egghead.io/instructors/ian-jones","avatar_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/original/me.jpeg","avatar_480_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_480/me.jpeg","avatar_280_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_280/me.jpeg","avatar_256_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_256/me.jpeg","avatar_128_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_128/me.jpeg","avatar_64_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_64/me.jpeg","avatar_32_url":"https://d2eip9sf3oo6c2.cloudfront.net/instructors/avatars/000/000/040/square_32/me.jpeg","lessons_url":"https://egghead.io/api/v1/instructors/ian-jones/lessons","published_lessons":25,"published_courses":0},"progress_url":"https://egghead.io/api/v1/playlists/learn-remix-by-building-a-social-media-platform-with-typescript-and-prisma-cddb0550/progress","collection_progress":{"is_completed":true,"completed_lesson_count":14,"time_left":0,"lesson_count":14,"time_remaining":0,"completed_lessons":[{"slug":"remix-load-and-display-static-data-with-remix-loaders","url":"https://egghead.io/api/v1/lessons/remix-load-and-display-static-data-with-remix-loaders"},{"slug":"remix-install-and-model-data-with-prisma","url":"https://egghead.io/api/v1/lessons/remix-install-and-model-data-with-prisma"},{"slug":"remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders","url":"https://egghead.io/api/v1/lessons/remix-retrieve-and-display-data-from-the-database-through-prisma-and-remix-loaders"},{"slug":"remix-set-up-tailwind-and-create-a-presentational-component-in-remix","url":"https://egghead.io/api/v1/lessons/remix-set-up-tailwind-and-create-a-presentational-component-in-remix"},{"slug":"remix-add-data-to-your-database-through-remix-actions-and-prisma-create","url":"https://egghead.io/api/v1/lessons/remix-add-data-to-your-database-through-remix-actions-and-prisma-create"},{"slug":"remix-validate-form-data-through-a-remix-action-using-zod","url":"https://egghead.io/api/v1/lessons/remix-validate-form-data-through-a-remix-action-using-zod"},{"slug":"remix-connect-a-remix-application-to-planetscale-through-prisma","url":"https://egghead.io/api/v1/lessons/remix-connect-a-remix-application-to-planetscale-through-prisma"},{"slug":"remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel","url":"https://egghead.io/api/v1/lessons/remix-deploy-a-remix-application-with-production-database-to-the-internet-through-vercel"},{"slug":"remix-create-and-utilize-a-user-model-with-prisma-in-remix","url":"https://egghead.io/api/v1/lessons/remix-create-and-utilize-a-user-model-with-prisma-in-remix"},{"slug":"remix-create-and-use-a-layout-with-remix-pathless-layout-routes","url":"https://egghead.io/api/v1/lessons/remix-create-and-use-a-layout-with-remix-pathless-layout-routes"},{"slug":"remix-validate-user-sign-up-data-in-remix-and-hash-a-password","url":"https://egghead.io/api/v1/lessons/remix-validate-user-sign-up-data-in-remix-and-hash-a-password"},{"slug":"remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage","url":"https://egghead.io/api/v1/lessons/remix-implement-user-login-in-remix-with-a-form-strategy-and-session-storage"},{"slug":"remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts","url":"https://egghead.io/api/v1/lessons/remix-implement-log-out-functionality-and-only-allow-logged-in-users-to-see-posts"},{"slug":"remix-add-user-data-to-a-post-creation-in-remix","url":"https://egghead.io/api/v1/lessons/remix-add-user-data-to-a-post-creation-in-remix"}],"series_started_on":"2022-05-23","last_lesson_watched_on":"2022-05-31","series_completed_on":"2022-05-31"},"rating_out_of_5":"4.540816326530614285714285714285714285","rating_count":14}
]
